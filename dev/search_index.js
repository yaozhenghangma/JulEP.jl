var documenterSearchIndex = {"docs":
[{"location":"manual/visualize/#VisualizeManual","page":"Visualization","title":"Visualization","text":"","category":"section"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"We have defined Plots recipes for band structure, projection character and DOS. The visualization can be done by a unitary API provided by Plots.","category":"page"},{"location":"manual/visualize/#VisualizeBandManual","page":"Visualization","title":"Band Structure","text":"","category":"section"},{"location":"manual/visualize/#Band-structure-for-LDA","page":"Visualization","title":"Band structure for LDA","text":"","category":"section"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"Since LDA or GGA calculation doesn't distinguish between major and minor spin, the type of band structure is Bands. (You can check the data type using typeof method.) The Bands type can be visualized by","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"plot!(band, kpoints; critical_points = nothing)","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"You can set keyword argument critical_points to be an array of all critical points in k points, for example [\"Γ\", \"M\", \"K\", \"Γ\"]. You can also add other keyword arguments provided by Plots to change the style of the figure.","category":"page"},{"location":"manual/visualize/#Band-structure-for-LSDA","page":"Visualization","title":"Band structure for LSDA","text":"","category":"section"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"For LSDA or GGA+Spin calculation, spins are labeled as major spin or minor spin. The type of band structure is BandsWithSpin and can be visualized by","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"plot!(bands, kpoints; critical_points = nothing, colorlist = [:black, :gray], stylelist = [:solid, :dash])","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"The additional keyword arguments colorlist and stylelist define the color and line style of band structure of major and minor spin. The default values are black solid line for major spin and gray dash line for minor spin.","category":"page"},{"location":"manual/visualize/#VisualizePBandManual","page":"Visualization","title":"Projected Band Structure","text":"","category":"section"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"After plotting band structure, you can visualize projection character on these bands.","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"plot!(projection, kpoints, bands; ion=nothing, orbit=nothing, tolerance=0, max_size=5, magnify=10)","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"You need provide metadata of projection, kpoints and bands to draw this figure. There are 5 additional keyword arguments:","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"ion: index of ion on which wavefunction is projected, for example ions=1 for first ion\norbit: index of orbit on which wavefunction is projected. The format is the same as ion's.\ntolerance: points with projection character value below tolerance will not be plotted, default 0.\nmax_size: maximum marker size of these points, default 5.\nmagnify: markersize = magnify * projectioncharacter, default 10.","category":"page"},{"location":"manual/visualize/#VisualizeDOSManual","page":"Visualization","title":"DOS","text":"","category":"section"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"After generating DOS using generate_dos method, you can use plot function to visualize it.","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"plot!(dos; shift = 0, max = 1, stretch_ratio = 1)","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"The shift arguments will shift all dos value. Default shift is 0.","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"The max argument will set maximum value of showed dos value. Default maximum is 1.","category":"page"},{"location":"manual/visualize/","page":"Visualization","title":"Visualization","text":"The stretch_ratio argument will set the ratio to stretch in y axis to beautify the graph.","category":"page"},{"location":"manual/VASP/#VASPManual","page":"VASP file I/O","title":"VASP file I/O","text":"","category":"section"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"We have provided methods to load:","category":"page"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"POSCAR\nPROCAR\nPROOUT\nEIGENVAL","category":"page"},{"location":"manual/VASP/#POSCARManual","page":"VASP file I/O","title":"POSCAR","text":"","category":"section"},{"location":"manual/VASP/#PROCARManual","page":"VASP file I/O","title":"PROCAR","text":"","category":"section"},{"location":"manual/VASP/#PROCAR-for-LDA","page":"VASP file I/O","title":"PROCAR for LDA","text":"","category":"section"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"For normal LDA or GGA calculation, you can load PROCAR file using load_procar function without any keyword arguments. And there are three values are returned, representing metadata of projection characters, k-points and bands, respectively.","category":"page"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"projection, kpoints, bands = load_procar(\"PROCAR\")","category":"page"},{"location":"manual/VASP/#PROCAR-for-LSDA","page":"VASP file I/O","title":"PROCAR for LSDA","text":"","category":"section"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"For LSDA or GGA+Spin calculation, you need set the keyword argument spin to be true. And the returned values are still divided into these three parts.","category":"page"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"projection, kpoints, bands= load_procar(\"PROCAR\"; spin = true)","category":"page"},{"location":"manual/VASP/#PROCAR-for-non-collinear-calculation","page":"VASP file I/O","title":"PROCAR for non-collinear calculation","text":"","category":"section"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"For non-collinear calculation, you need set the keyword argument noncollinear to be true. The returned values are divided into five parts, representing total projection characters, projection characters of x-axis, projection characters of y-axis, projection characters of z-axis, k-points and bands, respectively.","category":"page"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"projection_all, projection_x, projection_y, projection_z, kpoints, bands =\n    load_procar(\"PROCAR\"; noncollinear = true)","category":"page"},{"location":"manual/VASP/#TrickManual","page":"VASP file I/O","title":"Trick to distinguish between major spin and minor spin","text":"","category":"section"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"In addition, non-collinear calculation in VASP doesn't distinguish between major and minor spin. But you can use a calculation trick to distinguish between spins. For example, you can set the spin quantization axis to be z axis using SAXIS tag. Then, the only nonzero projection character value is projection_all and projection_z. For negative projection character value, the spin is minor spin, otherwise the spin is major spin. And we have defined a method distinguish_spin to do this job.","category":"page"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"projection, bands = distinguish_spin(projection_all, projection_z, bands)","category":"page"},{"location":"manual/VASP/","page":"VASP file I/O","title":"VASP file I/O","text":"The metadata of projection character and band of major spin and minor spin have been stored in projection and bands with ProjectionWithSpin and BandsWithSpin data type respectively.","category":"page"},{"location":"reference/Toolkit/#ToolkitAPI","page":"Toolkit","title":"Toolkit","text":"","category":"section"},{"location":"reference/Toolkit/#SmearAPI","page":"Toolkit","title":"Smearing Function","text":"","category":"section"},{"location":"reference/Toolkit/","page":"Toolkit","title":"Toolkit","text":"gaussian\nlorentzian","category":"page"},{"location":"reference/Toolkit/#MatterEnv.gaussian","page":"Toolkit","title":"MatterEnv.gaussian","text":"gaussian(x::Real, x₀::Real; σ::Real = 0.05)\n\nPDF of Gaussian distribution: g(x x_0 sigma)=frac1sigma sqrt2 pi     exp left(-frac12frac(x-x_0)^2sigma^2right).\n\n\n\n\n\n","category":"function"},{"location":"reference/Toolkit/#MatterEnv.lorentzian","page":"Toolkit","title":"MatterEnv.lorentzian","text":"lorentzian(x::Real, x₀::Real; γ::Real = 0.03)\n\nPDF of Cauchy-Lorentz distribution: fleft(x x_0 gammaright) =frac1pi gamma     leftfracgamma^2left(x-x_0right)^2+gamma^2right\n\n\n\n\n\n","category":"function"},{"location":"reference/Toolkit/#Generate-DOS","page":"Toolkit","title":"Generate DOS","text":"","category":"section"},{"location":"reference/Toolkit/","page":"Toolkit","title":"Toolkit","text":"generate_dos","category":"page"},{"location":"reference/Toolkit/#MatterEnv.generate_dos","page":"Toolkit","title":"MatterEnv.generate_dos","text":"generate_dos(bands::Bands, kpoints::Array{KPoint, 1};\n    smear::Function=gaussian, energy_number::Integer=10000)\n\nGenerate electronic density of states using bands and kpoints.\n\nArguments\n\nbands::Bands: metadata of bands\nkpoints::Array{KPoint, 1}: metadata of k-points\nsmear::Function=gaussian: smearing function, default: Gaussian smear\nenergy_number::Integer=10000: number of energy points, default 10000\n\nReturns\n\ndos::DOS: metadata of dos\n\n\n\n\n\ngenerate_dos(bands::BandsWithSpin, kpoints::Array{KPoint, 1};\n    smear::Function=gaussian, energy_number::Integer=10000)\n\nGenerate electronic density of states using bands and kpoints.\n\nArguments\n\nbands::BandsWithSpin: metadata of bands\nkpoints::Array{KPoint, 1}: metadata of k-points\nsmear::Function=gaussian: smearing function, default: Gaussian smear\nenergy_number::Integer=10000: number of energy points, default 10000\n\nReturns\n\ndos1::DOS: metadata of dos of spin up\ndos2::DOS: metadata of dos of spin down\n\n\n\n\n\ngenerate_dos(bands::Bands, kpoints::Array{KPoint, 1},\n    projection::Projection;\n    smear::Function=gaussian, energy_number::Integer=10000,\n    ions::Array{Integer, 1}=nothing, orbits::Array{Integer, 1}=nothing)\n\nGenerate projected electronic density of states using bands and kpoints.\n\nArguments\n\nbands::Bands: metadata of bands\nkpoints::Array{KPoint, 1}: metadata of k-points\nprojection::Projection: metadata of projection\nsmear::Function=gaussian: smearing function, default: Gaussian smear\nenergy_number::Integer=10000: number of energy points, default 10000\nions::Union{Array{<:Integer, 1}, UnitRange{<:Integer}, Nothing}=nothing:   index of ions which wavefunction is projected to\norbits::Union{Array{<:Integer, 1}, UnitRange{<:Integer}, Nothing}=nothing:   index of orbitss which wavefunction is projected to\n\nReturns\n\npdos::DOS: metadata of projected dos\n\n\n\n\n\ngenerate_dos(bands::Bands, kpoints::Array{KPoint, 1},\n    projection::Projection;\n    smear::Function=gaussian, energy_number::Integer=10000,\n    ions::Array{Integer, 1}=nothing, orbits::Array{Integer, 1}=nothing)\n\nGenerate projected electronic density of states using bands and kpoints.\n\nArguments\n\nbands::BandsWithSpin: metadata of bands\nkpoints::Array{KPoint, 1}: metadata of k-points\nprojection::ProjectionWithSpin: metadata of projection\nsmear::Function=gaussian: smearing function, default: Gaussian smear\nenergy_number::Integer=10000: number of energy points, default 10000\nions::Union{Array{<:Integer, 1}, UnitRange{<:Integer}, Nothing}=nothing:   index of ions which wavefunction is projected to\norbits::Union{Array{<:Integer, 1}, UnitRange{<:Integer}, Nothing}=nothing:   index of orbitss which wavefunction is projected to\n\nReturns\n\npdos1::DOS: metadata of projected dos of spin up\npdos2::DOS: metadata of projected dos of spin down\n\n\n\n\n\n","category":"function"},{"location":"reference/Toolkit/#Energy-Shift","page":"Toolkit","title":"Energy Shift","text":"","category":"section"},{"location":"reference/Toolkit/","page":"Toolkit","title":"Toolkit","text":"shift_energy!","category":"page"},{"location":"reference/Toolkit/#MatterEnv.shift_energy!","page":"Toolkit","title":"MatterEnv.shift_energy!","text":"shift_energy!(band::Band, energy::Real)\n\nShift the energy value of band with given energy value.\n\nArguments\n\nband::Band: metadata of band\nenergy::Real: shift value\n\n\n\n\n\nshift_energy!(bands::Bands, energy::Real)\n\nShift the energy value of all bands with given energy value.\n\nArguments\n\nbands::Bands: metadata of band\nenergy::Real: shift value\n\n\n\n\n\nshift_energy!(bands::BandsWithSpin, energy::Real)\n\nShift the energy value of all bands with given energy value.\n\nArguments\n\nbands::BandsWithSpin: metadata of band\nenergy::Real: shift value\n\n\n\n\n\n","category":"function"},{"location":"reference/Toolkit/#Orbit","page":"Toolkit","title":"Orbit","text":"","category":"section"},{"location":"reference/Toolkit/","page":"Toolkit","title":"Toolkit","text":"projection_transformation!","category":"page"},{"location":"reference/Toolkit/#MatterEnv.projection_transformation!","page":"Toolkit","title":"MatterEnv.projection_transformation!","text":"projection_transformation!(projection::Projection,\n    transfer_matrix::Matrix{<:Number}...;\n    orbit::Symbol=:d)\n\nLinear transformation of projection ⟨Yₗₘ|ϕₙₖ⟩.\n\nArguments\n\nprojection::Projection: projection of wavefunction\ntransfer_matrix::Matrix{<:Number}...: transformation matrix M1, M2 ...\norbit::Symbol=:d: orbits to be considered in transformation, default d orbits\n\n\n\n\n\nprojection_transformation!(projection::ProjectionWithSpin,\n    transfer_matrix::Matrix{<:Number}...;\n    orbit::Symbol=:d)\n\nLinear transformation of projection ⟨Yₗₘ|ϕₙₖ⟩.\n\nArguments\n\nprojection::ProjectionWithSpin: projection of wavefunction\ntransfer_matrix::Matrix{<:Number}...: transformation matrix M1, M2 ...\norbit::Symbol=:d: orbits to be considered in transformation, default d orbits\n\n\n\n\n\n","category":"function"},{"location":"reference/Toolkit/#Projection","page":"Toolkit","title":"Projection","text":"","category":"section"},{"location":"reference/Toolkit/","page":"Toolkit","title":"Toolkit","text":"distinguish_spin\nget_projection_sign\napply_projection_sign","category":"page"},{"location":"reference/Toolkit/#MatterEnv.distinguish_spin","page":"Toolkit","title":"MatterEnv.distinguish_spin","text":"distinguish_spin(projection_all::Projection,\n    projection_axis::Projection,\n    bands::Bands)\n\nDistinguish projection of spin up and spin down. (Used in projection loaded from PROCAR)\n\nArguments\n\nprojection_all::Projection: total projected magnetization\nprojection_axis::Projection: projected magnetization in x, y or z axis\nbands::Bands: metadata of bands\n\nReturnss\n\nProjectionWithSpin: projection of spin up and spin down\nBandsWithSpin: metadata of bands of spin up and spin down\n\n\n\n\n\n","category":"function"},{"location":"reference/Toolkit/#MatterEnv.get_projection_sign","page":"Toolkit","title":"MatterEnv.get_projection_sign","text":"get_projection_sign(projection::Projection)\n\nApplied sign function to squared projection\n\nArguments\n\nprojection::Projection: projection of wavefunction\n\nReturns\n\nArray{Float, 4}: sign of each squared projection\n\n\n\n\n\n","category":"function"},{"location":"reference/MatterBase/#MatterBaseAPI","page":"Basic Type","title":"Basic Type","text":"","category":"section"},{"location":"reference/MatterBase/#Cell","page":"Basic Type","title":"Cell","text":"","category":"section"},{"location":"reference/MatterBase/","page":"Basic Type","title":"Basic Type","text":"Atom\nLattice\nCell","category":"page"},{"location":"reference/MatterBase/#MatterEnv.Atom","page":"Basic Type","title":"MatterEnv.Atom","text":"Atom{T <: Real}\n\nData type for single atom.\n\nFields\n\nsymbol::String: stores the chemical symbol of the atom\nposition::Array{T, 1}: stores the Certesian coordinate of the atom\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#MatterEnv.Lattice","page":"Basic Type","title":"MatterEnv.Lattice","text":"Lattice{T <: Real}\n\nData type of lattice.\n\nFields\n\nlattice::Array{T, 2}: stores 3×3 matrix for the lattice\na:Array{T, 1}: stores basis of axis a\nb:Array{T, 1}: stores basis of axis b\nc:Array{T, 1}: stores basis of axis c\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#MatterEnv.Cell","page":"Basic Type","title":"MatterEnv.Cell","text":"Cell\n\nData type for cell.\n\nFields\n\nname::String: stores the name of the cell.\nlattice::Lattice{<:Real}: stores metadata about the lattice\natoms::Array{Atom{<:Real}, 1}: stroes metadata of all atoms in the cell\nnumbers::Array{<:Integer, 1}: stroes the numbers of atoms of elements\nsymbols::Array{String, 1}: stores the chemical symbols of atoms of elements\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#K-point","page":"Basic Type","title":"K-point","text":"","category":"section"},{"location":"reference/MatterBase/","page":"Basic Type","title":"Basic Type","text":"KPoint","category":"page"},{"location":"reference/MatterBase/#MatterEnv.KPoint","page":"Basic Type","title":"MatterEnv.KPoint","text":"KPoint\n\nData type for k-point.\n\nFields\n\nweight::Real: stores the weight of k-point\ncoordinate::Array{<:Real, 1}: stores the coordinate of k-point\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#Band-Structure","page":"Basic Type","title":"Band Structure","text":"","category":"section"},{"location":"reference/MatterBase/","page":"Basic Type","title":"Basic Type","text":"Band\nBands\nBandsWithSpin","category":"page"},{"location":"reference/MatterBase/#MatterEnv.Band","page":"Basic Type","title":"MatterEnv.Band","text":"Band <: AbstractBand\n\nData type for band structure.\n\nFields\n\noccupancy::Real: stores the occupancy of the band\nenergy::Array{<:Real, 1}: stores the energy values at each k-points\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#MatterEnv.Bands","page":"Basic Type","title":"MatterEnv.Bands","text":"Bands <: AbstractBands\n\nData type for band structure.\n\nFields\n\nbands::Array{Band, 1}: store all bands\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#MatterEnv.BandsWithSpin","page":"Basic Type","title":"MatterEnv.BandsWithSpin","text":"BandsWitSpin <: AbstractBands\n\nData type for band structure.\n\nFields\n\nbands_up::Array{Band, 1}: store all bands for spin up\nbands_down::Array{Band, 1}: store all bands for spin down\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#DOS","page":"Basic Type","title":"DOS","text":"","category":"section"},{"location":"reference/MatterBase/","page":"Basic Type","title":"Basic Type","text":"DOS","category":"page"},{"location":"reference/MatterBase/#MatterEnv.DOS","page":"Basic Type","title":"MatterEnv.DOS","text":"DOS\n\nData type for density of states.\n\nFields\n\nenergy::Array{<:Real, 1}: energy value of each dos point\ndos::Array{<:Real, 1}: metadata of dos\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#Projection","page":"Basic Type","title":"Projection","text":"","category":"section"},{"location":"reference/MatterBase/","page":"Basic Type","title":"Basic Type","text":"Projection\nProjectionWithSpin","category":"page"},{"location":"reference/MatterBase/#MatterEnv.Projection","page":"Basic Type","title":"MatterEnv.Projection","text":"Projection\n\nData type for projection of wave function.\n\nFields\n\nnumber_kpoints::Integer: stores the number of k-points\nnumber_bands::Integer: stores the number of bands\nnumber_ions::Integer: stores the number of ions\nprojection::Array{<:Complex, 4}: stores the projection ⟨Yₗₘ|ϕₙₖ⟩. The index order is   [kpoint number, band number, ion number, orbit number]\nprojection_square::Array{<:Real, 4}: stores the squared projection |⟨Yₗₘ|ϕₙₖ⟩|². The   index order is same as projection.\n\n\n\n\n\n","category":"type"},{"location":"reference/MatterBase/#MatterEnv.ProjectionWithSpin","page":"Basic Type","title":"MatterEnv.ProjectionWithSpin","text":"Projection\n\nData type for projection of wave function.\n\nFields\n\nprojection_up::Projection: stores the projection of spin up electrons\nprojection_down::Projection: stores the projection of spin down electrons\n\n\n\n\n\n","category":"type"},{"location":"tutorials/band/#BandTutorial","page":"Projected Band Structure","title":"Projected Band Structure","text":"","category":"section"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"Here, we will show how to plot projected band structure using PROCAR, as our first example.","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"To perform this task, we need three packages.","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"using MatterEnv\nusing Plots\nusing LaTeXStrings","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"The first step is to load metadata from PROCAR file. You can check the details from this section. Here, we use a GGA+U+SOC result with lorbit=12 tag.","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"projection_all, _, _, projection_z, kpoints, bands = load_procar(\"PROCAR\"; noncollinear=true)","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"To make the image look better, we set Fermi energy to be 0.","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"fermi_energy =  -3.0009\nshift_energy!(bands, -fermi_energy)","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"Then we define two transformation matrices to do orbit transformation. You chan check the details from this section","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"transformation_matrix1 =\n[\n    -1/√3   √2/√3   0       0       0;\n    √2/√3   1/√3    0       0       0;\n    0       0       1       0       0;\n    0       0       0       √2/√3   1/√3;\n    0       0       0       -1/√3   √2/√3;\n]\ntransformation_matrix2 =\n[\n    1       0       0       0       0;\n    0       1/√2    0       0       1/√2im;\n    0       0       1       0       0;\n    0       0       0       1       0;\n    0       1/√2    0       0       -1/√2im;\n]\nprojection_transformation!(projection_all, transformation_matrix1, transformation_matrix2)","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"Since VASP doesn't distinguish between major spin and minor spin, we need use a trick to separate projections.","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"projection, bands = distinguish_spin(projection_all, projection_z, bands)","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"Finally, we can plot the projected band structure. Since Plots doesn't provide attribute to control ticks' length, we use a function to solve this problem.","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"critical_points = [\"Γ\", \"M\", \"K\", \"Γ\"]      # Critical points of chosen k points\ntolerance = 0.15                            # minimum value of projection character value to be plotted\nmagnify = 7.0                               # marker_size = magnify * projection_character\nmax_size = 3.0                              # maximum value of marker size\n\nfunction ticks_length!(;tl=0.02)\n    p = Plots.current()\n    xticks, yticks = Plots.xticks(p)[1][1], Plots.yticks(p)[1][1]\n    xl, yl = Plots.xlims(p), Plots.ylims(p)\n    x1, y1 = zero(yticks) .+ xl[1], zero(xticks) .+ yl[1]\n    sz = p.attr[:size]\n    r = sz[1]/sz[2]\n    dx, dy = tl*(xl[2] - xl[1]), tl*r*(yl[2] - yl[1])\n    plot!([xticks xticks]', [y1 y1 .+ dy]', c=:black, labels=false)\n    plot!([x1 x1 .+ dx]', [yticks yticks]', c=:black, labels=false, xlims=xl, ylims=yl)\n    return Plots.current()\nend\n\n# some basic setting for the figure\nplot(\n    dpi = 300,\n    size = (800, 600),\n    framestyle = :box,\n    fontfamily = \"Times Roman\",\n    ylabel = \"Energy (eV)\",\n    guidefontsize = 25,\n    ylim = (-3.0, 7.0),\n    legend = false,\n    grid = :x,\n    gridstyle = :dash,\n    gridalpha = 1,\n    tick_direction = :in,\n    yticks = -2:2:6,\n    yminorticks = false,\n    tickfontsize = 23,\n    bottom_margin = 1.0Plots.cm,\n    left_margin = 1.0Plots.cm,\n)\n\nticks_length!(;tl=0.02)\n\n# plot all bands. black solid for spin up and gray dash line for spin down\nplot!(bands, kpoints; critical_points = critical_points, colorlist = [:black, :black], stylelist = [:solid, :dash])\n\n# plot projected band structure\nplot!(projection, kpoints, bands; ion=1, orbit=7, markeralpha =1, markerstrokecolor=:red, markercolor=:red,  tolerance=tolerance, max_size=max_size, magnify=magnify)\nplot!(projection, kpoints, bands; ion=1, orbit=6, markeralpha =1, markerstrokecolor=:orange, markercolor=:orange, tolerance=tolerance, max_size=max_size, magnify=magnify)\nplot!(projection, kpoints, bands; ion=1, orbit=9, markeralpha =1, markerstrokecolor=:blue, markercolor=:blue, tolerance=tolerance, max_size=max_size, magnify=magnify)\nplot!(projection, kpoints, bands; ion=1, orbit=5, markeralpha =1, markerstrokecolor=:green, markercolor=:green, tolerance=tolerance, max_size=max_size, magnify=magnify)\nplot!(projection, kpoints, bands; ion=1, orbit=8, markeralpha =1, markerstrokecolor=:green, markercolor=:green, tolerance=tolerance, max_size=max_size, magnify=magnify)\n\n# grid line\nplot!([0, length(kpoints)], [0, 0], linecolor = :gray, linestyle = :dash, label=nothing)\n\nsavefig(\"band.png\")\n","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"(Image: band)","category":"page"},{"location":"tutorials/band/","page":"Projected Band Structure","title":"Projected Band Structure","text":"You can download this example script from here.","category":"page"},{"location":"reference/VASP/#VASPAPI","page":"VASP File","title":"VASP File","text":"","category":"section"},{"location":"reference/VASP/#POSCAR","page":"VASP File","title":"POSCAR","text":"","category":"section"},{"location":"reference/VASP/","page":"VASP File","title":"VASP File","text":"load_poscar\nsave_poscar","category":"page"},{"location":"reference/VASP/#MatterEnv.load_poscar","page":"VASP File","title":"MatterEnv.load_poscar","text":"load_poscar(filename::String=\"POSCAR\") -> Cell\n\nLoad cell structure from POSCAR file.\n\nArguments\n\nfilename::String=\"POSCAR\": name of input file\n\nReturns\n\nCell: structure of cell\n\n\n\n\n\n","category":"function"},{"location":"reference/VASP/#MatterEnv.save_poscar","page":"VASP File","title":"MatterEnv.save_poscar","text":"save_poscar(cell::Cell, filename::String=\"POSCAR\", direct::Bool=true)\n\nSave cell structure into POSCAR file.\n\nArguments\n\ncell::Cell: structure of cell\nfilename::String=\"POSCAR\": name of output file\ndirect::Bool=true: output direct coordinate or Certesian coordinate\n\n\n\n\n\n","category":"function"},{"location":"reference/VASP/#PROCAR","page":"VASP File","title":"PROCAR","text":"","category":"section"},{"location":"reference/VASP/","page":"VASP File","title":"VASP File","text":"load_procar\nsave_procar","category":"page"},{"location":"reference/VASP/#MatterEnv.load_procar","page":"VASP File","title":"MatterEnv.load_procar","text":"load_procar(filename::String=\"PROCAR\"; spin::Bool=false, noncollinear::Bool=false) -> Projection, KPoints, Bands\n\nLoad projection of wave function ⟨Yₗₘ|ϕₙₖ⟩ from PROCAR file.\n\nArguments\n\nfilename::String=\"PROCAR\": name of input file\nspin::Bool=false: ISPIN = 0(false) or 1(true)\nnoncollinear::Bool=false: LNONCOLINEAR = 0(false) or 1(true). For noncolinear=1, value of spin is neglected.\n\nReturns for collinear\n\nProjection: Projection of wave function ⟨Yₗₘ|ϕₙₖ⟩\nArray{KPoint, 1}: metadata of k-points\nBands: metadata of all bands\n\nReturns for noncollinear\n\nProjection: Total projection of wave function ⟨Yₗₘ|ϕₙₖ⟩\nProjection: Projection of spin along x-axis\nProjection: Projection of spin along y-axis\nProjection: Projection of spin along z-axis\nArray{KPoint, 1}: metadata of k-points\nBands: metadata of all bands\n\n\n\n\n\n","category":"function"},{"location":"reference/VASP/#MatterEnv.save_procar","page":"VASP File","title":"MatterEnv.save_procar","text":"save_procar(projection::Projection,\n    kpoints::Array{KPoint, 1},\n    bands::AbstractBands,\n    filename::String=\"PROCAR\";\n    squared_only::Bool=true)\n\nSave projection of wave function ⟨Yₗₘ|ϕₙₖ⟩ into PROCAR file.\n\nArguments\n\nprojection::AbstractProjection: projection of wave function\nkpoints::Array{KPoint, 1}: metadata of k-points\nbands::AbstractBands: metadata of bands\nfilename::String=\"PROCAR\": name of output file\nsquared_only::Bool=true: only output squared projection |⟨Yₗₘ|ϕₙₖ⟩|² or not\n\n\n\n\n\n","category":"function"},{"location":"reference/VASP/#EIVENVAL","page":"VASP File","title":"EIVENVAL","text":"","category":"section"},{"location":"reference/VASP/","page":"VASP File","title":"VASP File","text":"load_eigenval","category":"page"},{"location":"reference/VASP/#MatterEnv.load_eigenval","page":"VASP File","title":"MatterEnv.load_eigenval","text":"load_eigenval(filename::String=\"EIGENVAL\", spin::Bool=false) -> Bands, Kpoints\n\nLoad band structure from EIVENVAL file.\n\nArguments\n\nfilename::String=\"EIGENVAL\": name of input file\nspin::Bool=false: distingush spin up and spin down or not\n\nReturns\n\nBands: Eigen-values of energy in each k-points\nArray{KPoint, 1}: K-points and weight\n\n\n\n\n\n","category":"function"},{"location":"reference/VASP/#PROOUT","page":"VASP File","title":"PROOUT","text":"","category":"section"},{"location":"reference/VASP/","page":"VASP File","title":"VASP File","text":"load_proout","category":"page"},{"location":"reference/VASP/#MatterEnv.load_proout","page":"VASP File","title":"MatterEnv.load_proout","text":"load_proout(filename::String=\"PROOUT\") -> Projection\n\nLoad projection of wave function ⟨Yₗₘ|ϕₙₖ⟩ from PROOUT file.\n\nArguments\n\nfilename::String=\"PROOUT\": name of input file\n\nReturns\n\nProjection: Projection of wave function ⟨Yₗₘ|ϕₙₖ⟩\n\n\n\n\n\n","category":"function"},{"location":"reference/ReferenceList/#APIList","page":"API List","title":"API List","text":"","category":"section"},{"location":"reference/ReferenceList/","page":"API List","title":"API List","text":"","category":"page"},{"location":"manual/DOS/#DOSManual","page":"Generate DOS","title":"Generate DOS","text":"","category":"section"},{"location":"manual/DOS/#DOS","page":"Generate DOS","title":"DOS","text":"","category":"section"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"Using metadata of bands and k-points, you can generate DOS with generate_dos method. For bands returned by LDA or GGA calculation, the returned value is one DOS. For bands returned by LSDA or GGA+Spin calculation, there are two returned DOS to distinguish between major spin and minor spin.","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"dos = generate_dos(bands, kpoints; smear=gaussian, energy_number=10000)\ndos_up, dos_down = generate_dos(bands, kpoints; smear=gaussian, energy_number=10000)","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"The keyword argument smear defines the smearing function to use in generating DOS. The default smearing function is Gaussian function.","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"The keywork argument energy_number defines the number of points of energy value. The default number is 10000.","category":"page"},{"location":"manual/DOS/#Projected-DOS","page":"Generate DOS","title":"Projected DOS","text":"","category":"section"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"You can generate projected DOS using metadata of projection character, bands and k-points using generate_dos method.","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"pdos = generate_dos(bands, kpoints, projection; smear=gaussian, energy_number=10000, ions=nothing, orbits=nothing)\npdos_up, pdos_down = generate_dos(bands, kpoints, projection; smear=gaussian, energy_number=10000, ions=nothing, orbits=nothing)","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"The additional keyword argument ions defines the index of ions on which the DOS are projected. For example, you can use ions=1 for single ion, ions=1:3 or ions=[1,2,3] for multi ions. If a nothing is provided, the generate_dos method will consider all ions.","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"The keyword argument orbits defines the index of orbits on which the DOS are projected. The format is the same as ions's.","category":"page"},{"location":"manual/DOS/#Smearing-Function","page":"Generate DOS","title":"Smearing Function","text":"","category":"section"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"There are two smearing function available now.","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"Gaussian distribution\nCauchy-Lorentz distribution","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"See API part for more details.","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"For example, if you want a Gaussian distribution with standard deviation being 0.01 to generate a DOS. You can write the code as","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"smear(x, x₀) = gaussian(x, x₀; σ=0.01)\ndos = generate_dos(bands, kpoints; smear=smear)","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"And you can define a new smearing function to generate DOS. For example","category":"page"},{"location":"manual/DOS/","page":"Generate DOS","title":"Generate DOS","text":"function my_smear(x, x₀)\n    return (abs(x - x₀) + 0.01)^(-1)\nend\ndos = generate_dos(bands, kpoints; smear=my_smear)","category":"page"},{"location":"tutorials/dos/#DOSTutorial","page":"Projected DOS","title":"Projected DOS","text":"","category":"section"},{"location":"tutorials/dos/","page":"Projected DOS","title":"Projected DOS","text":"Here, we use a PROCAR with different k points distribution, and only modify the final step of last tutorial to plot projected DOS.","category":"page"},{"location":"tutorials/dos/","page":"Projected DOS","title":"Projected DOS","text":"In the last step, we generate projected DOS using Gaussian smearing method","category":"page"},{"location":"tutorials/dos/","page":"Projected DOS","title":"Projected DOS","text":"smear(x, x₀) = gaussian(x, x₀; σ=0.05)\npdos_up_0, pdos_down_0 = generate_dos(bands, kpoints, projection; smear=smear, ions=[2], orbits=[2,3,4])\npdos_up_1, pdos_down_1 = generate_dos(bands, kpoints, projection; smear=smear, ions=[1], orbits=[7])\npdos_up_2, pdos_down_2 = generate_dos(bands, kpoints, projection; smear=smear, ions=[1], orbits=[5, 8])\npdos_up_3, pdos_down_3 = generate_dos(bands, kpoints, projection; smear=smear, ions=[1], orbits=[6])\npdos_up_4, pdos_down_4 = generate_dos(bands, kpoints, projection; smear=smear, ions=[1], orbits=[9])","category":"page"},{"location":"tutorials/dos/","page":"Projected DOS","title":"Projected DOS","text":"and plot the projected DOS:","category":"page"},{"location":"tutorials/dos/","page":"Projected DOS","title":"Projected DOS","text":"function ticks_length!(;tl=0.02)\n    p = Plots.current()\n    xticks, yticks = Plots.xticks(p)[1][1], Plots.yticks(p)[1][1]\n    xl, yl = Plots.xlims(p), Plots.ylims(p)\n    x1, y1 = zero(yticks) .+ xl[1], zero(xticks) .+ yl[1]\n    sz = p.attr[:size]\n    r = sz[1]/sz[2]\n    dx, dy = tl*(xl[2] - xl[1]), tl*r*(yl[2] - yl[1])\n    plot!([xticks xticks]', [y1 y1 .+ dy]', c=:black, labels=false)\n    plot!([x1 x1 .+ dx]', [yticks yticks]', c=:black, labels=false, xlims=xl, ylims=yl)\n    return Plots.current()\nend\n\nplot(\n    dpi = 300,\n    size = (800, 600),\n    framestyle = :box,\n    fontfamily = \"Times Roman\",\n    ylabel = \"DOS (states/eV)\",\n    xlabel = \"Energy (eV)\",\n    guidefontsize = 25,\n    ylim = (0, 20),\n    xlim = (-6.0, 6.0),\n    legend = false,\n    yticks = (0:4:20, [\"0\", \"2\", \"4\", \"4\", \"4\", \"4\"]),\n    grid = :y,\n    gridstyle = :solid,\n    tick_direction = :in,\n    tickfontsize = 23,\n    bottom_margin = 1.2Plots.cm,\n    left_margin = 1.0Plots.cm,\n)\n\nticks_length!(;tl=0.02)\n\n# plot projected dos, blue line for spin up and red line for spin down\nplot!(pdos_up_0; shift = 0, max = 2, stretch_ratio = 2, linecolor = :blue)\nplot!(pdos_up_1; shift = 4, max = 4, linecolor = :blue)\nplot!(pdos_up_2; shift = 8, max = 4, linecolor = :blue)\nplot!(pdos_up_3; shift = 12, max = 4, linecolor = :blue)\nplot!(pdos_up_4; shift = 16, max = 4,linecolor = :blue)\nplot!(pdos_down_0; shift = 0, max = 2, stretch_ratio = 2,linecolor = :red)\nplot!(pdos_down_1; shift = 4, max = 4, linecolor = :red)\nplot!(pdos_down_2; shift = 8, max = 4, linecolor = :red)\nplot!(pdos_down_3; shift = 12, max = 4, linecolor = :red)\nplot!(pdos_down_4; shift = 16, max = 4, linecolor = :red)\n\n# annotation\nannotate!(5, 2, (L\"3p\", 23))\nannotate!(5, 6, (L\"a_{1g}\", 23))\nannotate!(5, 10, (L\"e_{g}^{\\sigma}\", 23))\nannotate!(5, 14, (L\"L_{z-}\", 23))\nannotate!(5, 18, (L\"L_{z+}\", 23))\n\n# grid line\nplot!([-6, 6], [4, 4], linecolor = :black)\nplot!([-6, 6], [8, 8], linecolor = :black)\nplot!([-6, 6], [12, 12], linecolor = :black)\nplot!([-6, 6], [16, 16], linecolor = :black)\nplot!([0, 0], [0, 20], linecolor = :black, linestyle = :dash)\n\nsavefig(\"dos.png\")","category":"page"},{"location":"tutorials/dos/","page":"Projected DOS","title":"Projected DOS","text":"The result figure is plotted as (Image: dos)","category":"page"},{"location":"tutorials/dos/","page":"Projected DOS","title":"Projected DOS","text":"The script can be download from here.","category":"page"},{"location":"manual/orbit/#OrbitManual","page":"Orbit Transformation","title":"Orbit Transformation","text":"","category":"section"},{"location":"manual/orbit/","page":"Orbit Transformation","title":"Orbit Transformation","text":"The spd projected wave function character produced by VASP with lorbit=12 tag can be used to produce projected wave function character on arbitrary orbit, through a linear transformation.","category":"page"},{"location":"manual/orbit/","page":"Orbit Transformation","title":"Orbit Transformation","text":"For example, under trigonal crystal field, the degenerate d orbits split into e_g^sigma, e_g^pi and a_1g orbits. In local coordinate xprime yprime zprime, these orbits have the following form:","category":"page"},{"location":"manual/orbit/","page":"Orbit Transformation","title":"Orbit Transformation","text":"beginaligned\nlefte_g_1^sigmarightrangle=sqrtfrac13leftx^prime 2-y^prime 2rightrangle+sqrtfrac23leftx^prime z^primerightrangle \nlefte_g_1^pirightrangle=sqrtfrac23leftx^prime 2-y^prime 2rightrangle-sqrtfrac13leftx^prime z^primerightrangle \nlefte_g_2^sigmarightrangle=sqrtfrac23lefty^prime z^primerightrangle-sqrtfrac13leftx^prime y^primerightrangle \nlefte_g_2^pirightrangle=sqrtfrac13lefty^prime z^primerightrangle+sqrtfrac23leftx^prime y^primerightrangle \nlefta_1 grightrangle=left3 z^prime 2-r^prime 2rightrangle\nendaligned","category":"page"},{"location":"manual/orbit/","page":"Orbit Transformation","title":"Orbit Transformation","text":"Considering the order of d orbits in PROCAR file, we can define the transformation matrix as","category":"page"},{"location":"manual/orbit/","page":"Orbit Transformation","title":"Orbit Transformation","text":"transformation_matrix =\n[\n    -1/√3   √2/√3   0       0       0;\n    √2/√3   1/√3    0       0       0;\n    0       0       1       0       0;\n    0       0       0       √2/√3   1/√3;\n    0       0       0       -1/√3   √2/√3;\n]","category":"page"},{"location":"manual/orbit/","page":"Orbit Transformation","title":"Orbit Transformation","text":"and do the transformation on the projection read from PROCAR","category":"page"},{"location":"manual/orbit/","page":"Orbit Transformation","title":"Orbit Transformation","text":"using MatterEnv\n\nprojection, kpoints, bands = load_procar(\"PROCAR\"; spin=true, noncollinear=false)\nprojection_transformation!(projection, transformation_matrix)","category":"page"},{"location":"manual/orbit/","page":"Orbit Transformation","title":"Orbit Transformation","text":"After transformation, in projection object the index 5 6 7 8 9 represent orbits e_g2^sigma e_g2^pi a_1g e_g1^sigma e_g1^pi respectively.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = MatterEnv","category":"page"},{"location":"#MatterEnv","page":"Introduction","title":"MatterEnv","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"MatterEnv is an atomic environment package embedded in Julia. It defines basic type to describe atomic environment and provides postprocessing tools for DFT calculation.","category":"page"},{"location":"#Features","page":"Introduction","title":"Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Plot band structure and projected band structure\nGenerate and plot electronic density of states (DOS) and projected DOS\nVASP file I/O","category":"page"}]
}
